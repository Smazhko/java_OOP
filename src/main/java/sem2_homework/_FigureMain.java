/*
Добавить пять интерфейсов к классам из ДЗ 1, включающих все концепции, упомянутые на семинаре. включающих:
- интерфейсы,
- константы,
- default методы,
- перегрузки и переопределения методов.Вы можете выбрать любой класс из ДЗ 1 и добавить к нему интерфейсы.
Вам также предоставляется возможность добавить новые методы или использовать уже существующие методы в классе.
 */


/*
Петр , Добрый день!Спасибо !) Ваша реализация на отлично! Ниже комментарии лишь для ознакомления.
__

Хорошо:

> Все классы и интерфейсы распределены по своим пакетам, что упрощает структуру проекта и делает его более организованным.

> Интерфейсы IFigure2D и IFigure3D объявлены с абстрактными методами calcArea() и calcPerimeter() для двумерных и
трехмерных фигур, соответственно. Это хороший подход, позволяющий обобщить работу с разными типами фигур.

> Методы calcArea() и calcPerimeter() переопределены в классах Rectangle и Triangle в соответствии с особенностями этих
фигур.

> В классе Triangle предусмотрены перегруженные конструкторы для разных вариантов создания треугольника (разносторонний,
равнобедренный, равносторонний). Такой подход удобен и гибок для создания различных треугольников.

> В классе Triangle метод findType() используется для определения типа треугольника (разносторонний, равнобедренный,
прямоугольный). Это хорошее применение переключателя (switch) для удобного вывода информации о типе треугольника.

> В классе TriangleIPyramid метод calcVolume() пока возвращает 0, но предполагается, что вы можете дополнить его
реализацию для правильного расчета объема пирамиды.

-----------------------------------
Улучшения:

> В интерфейсе IFigure2D вы объявили метод showCalcs(), но он не реализован в классах Rectangle и Triangle. Можно
добавить этот метод в эти классы, чтобы они выводили дополнительные расчеты, как указано в интерфейсе.

> В классе Rectangle метод showCalcs() содержит лишние %n в форматировании строки. Вы можете убрать или скорректировать
их, чтобы они не вызывали ошибку форматирования.

> В классе TriangleRect можно переименовать поле type на что-то более информативное, например, triangleType, чтобы
избежать возможных путаниц.

> При рассмотрении интерфейса IPyramid вы объявили методы calcBottomBasePerimeter() и calcBottomBaseArea() без указания
модификатора доступа. В Java интерфейсные методы всегда являются публичными, поэтому добавьте явно модификатор public
перед объявлением методов.

> В классе TriangleIPyramid в методе showCalcs() вы используете некорректный формат для форматирования строки, например:
%.1. Нужно указать количество знаков после запятой, например, %.1f для формата числа с одним знаком после запятой.

> Рассмотрите возможность переопределения метода toString() в классе TriangleIPyramid, чтобы он возвращал информацию
о пирамиде, например: "Пирамида с основанием треугольника Δ ABC с высотой 10 и углом 90 градусов". Это улучшит
читаемость вывода информации о пирамиде.

> В классе TriangleRect метод calcArea() переопределен с учетом особенностей прямоугольного треугольника, что хорошо.
Однако метод calcPerimeter() также можно переопределить, чтобы учесть сумму длин сторон прямоугольного треугольника.

> Обратите внимание, что это лишь предложения по улучшению кода, и решение о том, что улучшать и каким образом, зависит
от конкретных требований и задач проекта.

> Примечание: Несмотря на то, что здесь перечислены некоторые улучшения, ваш код в целом хорош и хорошо демонстрирует
применение интерфейсов для определения различных поведений. Пишите если будут вопросы)
*/
package sem2_homework;

public class _FigureMain
{
	public static void main(String[] args)
	{
		Rectangle rect01 = new Rectangle();
		Rectangle rect02 = new Rectangle(10);
		Rectangle rect03 = new Rectangle(8,12);


		System.out.println(rect01);
		System.out.printf(rect01.showCalcs());

		System.out.println(rect02);
		System.out.printf(rect02.showCalcs());

		System.out.println(rect03);
		System.out.printf(rect03.showCalcs());

		Rectangle rect04 = new Rectangle(0);
		System.out.println(rect04);

		Rectangle rect05 = new Rectangle(0, 5);
		System.out.println(rect05);

		Rectangle rect06 = new Rectangle(5, 0);
		System.out.println(rect06);
	}
}

/*
Создан прямоугольник: ширина = 4, высота = 6
Его периметр = 20. площадь = 24.
Создан прямоугольник: ширина = 10, высота = 10
Его периметр = 40. площадь = 100.
Создан прямоугольник: ширина = 8, высота = 12
Его периметр = 40. площадь = 96.
Создан прямоугольник: ширина = 1, высота = 1
Создан прямоугольник: ширина = 1, высота = 5
Создан прямоугольник: ширина = 5, высота = 1
 */