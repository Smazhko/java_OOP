/*Задача 1 - Абстракция +
Реализуйте класс Товар, содержащий данные о товаре, и ТорговыйАвтомат, содержащий в себе методы
*/

/*Задача 2 - Инкапсуляция +
Реализуйте конструкторы, get/set методы, постройте логику торгового автомата на основе кода,
сделанного в предыдущем задании
*/

/*Задача 3 - Наследование +
Сделайте класс Товар абстрактным, создайте нескольких наследников (к примеру: БутылкаВоды),
сделайте интерфейсом ТорговыйАвтомат и реализуйте класс какого-то одного типа
ТорговогоАвтомата (пример: ПродающийБутылкиВодыАвтомат)
*/

/*Задача 4 - Полиморфизм
* Переопределите метод toString для Товара, запустите программу, после этого переопределите для
наследника этот метод, после запуска обратите внимание на изменение поведения.
* Создайте перегруженный метод выдачи товара ТорговымАвтоматом дополнив дополнительным
входным параметром (пример: getProduct(String name) выдающий товар по имени, создайте метод
возвращающий товар по имени и какому-либо параметру товара getProduct(String name, int volume)
*/

/*Домашнее задание
* Создать наследника класса Продукта - ГорячийНапиток с дополнительным полем int температура.
* Создать класс ГорячихНапитковАвтомат реализующий интерфейс ТорговыйАвтомат и реализовать
перегруженный метод getProduct(int name, int volume, int temperature) выдающий продукт
соответствующий имени, объему и температуре
* В main проинициализировать несколько ГорячихНапитков и ГорячихНапитковАвтомат и
воспроизвести логику заложенную в программе
* Все вышеуказанное создать согласно принципам ООП пройдённым на семинаре
*/


/*
Конечно! Ваш код демонстрирует хорошее понимание концепций абстракции, инкапсуляции, наследования и некоторых аспектов
полиморфизма в объектно-ориентированном программировании. Код реализует простую систему торгового автомата с автоматами
для холодных напитков и горячих напитков.

Вот несколько моментов, которые можно улучшить или учесть:

Инкапсуляция: Инкапсуляция важна для скрытия данных и обеспечения целостности данных. В классе Product поля name,
category, price и count объявлены как private, что хорошо. Однако отсутствуют методы-геттеры и методы-сеттеры.
Рекомендуется предоставить методы-геттеры и методы-сеттеры для доступа и изменения этих полей.
> было реализовано изначально

Использование интерфейсов: Интерфейс TradeAutomaton определен, но не используется в предоставленном коде. Было бы
полезно перестроить код, чтобы использовать этот интерфейс.
> DONE

Абстрактный класс: Класс Product определен как абстрактный класс, что является правильным выбором, так как он
представляет общую концепцию продукта. Однако нет необходимости делать его абстрактным, если нет абстрактных методов.
Если есть конкретные методы для всех продуктов, рассмотрите возможность перемещения их в класс Product.
> класс сделан абстрактным для того, чтоб клиент не мог создать его экземпляры

Полиморфизм: Предоставленный код демонстрирует некоторый уровень полиморфизма через перегрузку и переопределение
методов. Однако в классе HotDrink отсутствует переопределение метода toString. Важно переопределить метод toString во
всех подклассах, чтобы предоставить осмысленное представление объекта при использовании System.out.println.
> было реализовано изначально

Конструктор по умолчанию: Рассмотрите возможность предоставления конструктора по умолчанию для классов HotDrink и
ColdDrink, чтобы можно было создавать экземпляры без указания всех параметров.
> DONE

Форматирование: Обеспечьте согласованное форматирование кода (например, отступы, пробелы и т. д.), чтобы улучшить его
читаемость и поддерживаемость. Найдите горячие клавиши в зависимости от вашего приложения.
> DONE

Проверка данных: Рассмотрите добавление проверки в методы, которые взаимодействуют с автоматами, например, проверку на
допустимость переданного productID перед совершением покупки.
> DONE

Javadoc-комментарии: Хорошей практикой является добавление Javadoc-комментариев для классов, методов и полей, поясняющих
их назначение и использование.
> TO DO

Обработка ошибок: В реальных приложениях обработка ошибок важна. Рассмотрите добавление блоков try-catch для обработки
исключений, которые могут возникнуть во время выполнения программы.
> TO DO

В целом, предоставленный код является хорошей отправной точкой и демонстрирует понимание концепций ООП. Применяя
улучшения, упомянутые выше, код может стать более организованным, надежным и поддерживаемым. Кроме того, исследование
более сложных концепций ООП, таких как интерфейсы, абстрактные классы и иерархия наследования, позволит дополнительно
улучшить дизайн кода и его гибкость.
 */
package TradeAutomaton;

import java.util.Arrays;
import java.util.List;

public class program {
	public static void main(String[] args) {
		ColdDrink water1 = new ColdDrink("Святой источник", "газ мин вода", 0.33, 50, 20);
		List<ColdDrink> coldDrinksPriceList = Arrays.asList(
				new ColdDrink("BonAqua", "негаз вода", 0.33, 55, 15),
				new ColdDrink("BonAqua", "негаз вода", 0.5, 80, 15),
				new ColdDrink("Сандорик Яблоко", "сок", 0.25, 80, 25),
				new ColdDrink("Longer", "негаз слабоалк", 0.3, 125, 25),
				new ColdDrink("Fanta", "газ сладк вода", 0.5, 100, 25),
				new ColdDrink("Sprite", 100),
				new ColdDrink());

		List<HotDrink> hotDrinksPriceList = Arrays.asList(
				new HotDrink("Латте", 60, 100),
				new HotDrink("Эспрессо", 70, 60),
				new HotDrink("Американо", 70, 80),
				new HotDrink("Чай чёрный", 80, 60),
				new HotDrink("Чай зеленый", 80, 60),
				new HotDrink("Капуччино", 100),
				new HotDrink());

		ColdDrinksAutomaton automat000 = new ColdDrinksAutomaton();
		System.out.println(automat000);

		ColdDrinksAutomaton automat001 = new ColdDrinksAutomaton("Автомат с напитками", "Университет");
		System.out.println(automat001);
		automat001.addProduct(water1);
		automat001.addProductList(coldDrinksPriceList);

		automat001.printProducts();
		automat001.buy(0);
		automat001.buy(2);
		automat001.buy(0);
		automat001.buy(1);
		automat001.buy(4);
		automat001.buy("BonAqua");
		automat001.buy("Coca Cola");
		automat001.buy("BonAqua", 0.33);
		automat001.buy("BonAqua", 0.5);
		automat001.buy("BonAqua", 1.0);


		System.out.println(">>>>> КОНЕЦ СМЕНЫ >>>>>>");
		System.out.println(automat001);
		automat001.printProducts();

		HotDrinksAutomaton automat010 = new HotDrinksAutomaton("Кофемат", "Офисы на Семи Холмах");
		System.out.println(automat010);
		automat010.addProductList(hotDrinksPriceList);

		automat010.printProducts();
		automat010.buy(0);
		automat010.buy(2);
		automat010.buy("Латте");
		automat010.buy("Чай чёрный");
		automat010.buy("Американо", 55);
		automat010.buy("Американо", 70);
		automat010.buy("ЭКспрессо");
		automat010.buy("Латте");

		System.out.println(">>>>> КОНЕЦ СМЕНЫ >>>>>>");
		System.out.println(automat010);
	}
}

/*
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Автомат со снеками (#001), расположение: Сервис автоматов, Выручка: 0
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Автомат с напитками (#002), расположение: Университет, Выручка: 0
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Наполнение торгового автомата #002:
id 0: Святой источник      (0,33 л, кат.: газ мин вода  ) Ц: ₽ 50, в наличии 20 ед.
id 1: BonAqua              (0,33 л, кат.: негаз вода    ) Ц: ₽ 55, в наличии 15 ед.
id 2: BonAqua              (0,50 л, кат.: негаз вода    ) Ц: ₽ 80, в наличии 15 ед.
id 3: Сандорик Яблоко      (0,25 л, кат.: сок           ) Ц: ₽ 80, в наличии 25 ед.
id 4: Longer               (0,30 л, кат.: негаз слабоалк) Ц: ₽125, в наличии 25 ед.
id 5: Fanta                (0,50 л, кат.: газ сладк вода) Ц: ₽100, в наличии 25 ед.
id 6: Sprite               (0,50 л, кат.: без категории ) Ц: ₽  0, в наличии 0 ед.
id 7: Наименование товара  (0,00 л, кат.:               ) Ц: ₽  0, в наличии 0 ед.
--------------------------------------------------
Продукта с таким индексом не существует.
Покупка: BonAqua (0,50). Приходите ешё!
-----------
Продукта с таким индексом не существует.
Покупка: BonAqua (0,33). Приходите ешё!
-----------
Покупка: Longer (0,30). Приходите ешё!
-----------
Покупка: BonAqua (0,33). Приходите ешё!
-----------
К сожалению, напитка Coca Cola нет в наличии.
-----------
Покупка: BonAqua (0,33). Приходите ешё!
-----------
Покупка: BonAqua (0,50). Приходите ешё!
-----------
К сожалению, напитка BonAqua (1,00 л) нет в наличии.
-----------
>>>>> КОНЕЦ СМЕНЫ >>>>>>

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Автомат с напитками (#002), расположение: Университет, Выручка: 450
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Наполнение торгового автомата #002:
id 0: Святой источник      (0,33 л, кат.: газ мин вода  ) Ц: ₽ 50, в наличии 20 ед.
id 1: BonAqua              (0,33 л, кат.: негаз вода    ) Ц: ₽ 55, в наличии 12 ед.
id 2: BonAqua              (0,50 л, кат.: негаз вода    ) Ц: ₽ 80, в наличии 13 ед.
id 3: Сандорик Яблоко      (0,25 л, кат.: сок           ) Ц: ₽ 80, в наличии 25 ед.
id 4: Longer               (0,30 л, кат.: негаз слабоалк) Ц: ₽125, в наличии 24 ед.
id 5: Fanta                (0,50 л, кат.: газ сладк вода) Ц: ₽100, в наличии 25 ед.
id 6: Sprite               (0,50 л, кат.: без категории ) Ц: ₽  0, в наличии 0 ед.
id 7: Наименование товара  (0,00 л, кат.:               ) Ц: ₽  0, в наличии 0 ед.
--------------------------------------------------

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Кофемат (#001), расположение: Офисы на Семи Холмах, Выручка: 0
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Наполнение торгового автомата #001:
id 0: горячий Латте (60°C)       Ц: ₽100
id 1: горячий Эспрессо (70°C)    Ц: ₽ 60
id 2: горячий Американо (70°C)   Ц: ₽ 80
id 3: горячий Чай чёрный (80°C)  Ц: ₽ 60
id 4: горячий Чай зеленый (80°C) Ц: ₽ 60
id 5: горячий Капуччино (100°C)  Ц: ₽ 60
id 6: горячий Наименование товара (null°C) Ц: ₽  0
--------------------------------------------------
Продукта с таким индексом не существует.
Заберите Ваш горячий Американо (70°C)   Ц: ₽ 80. Приходите ешё!
-----------
Продукта с таким индексом не существует.
Заберите Ваш горячий Чай чёрный (80°C)  Ц: ₽ 60. Приходите ешё!
-----------
К сожалению, напиток Американо (55°C) я готовить не умею.
-----------
Заберите Ваш горячий Американо (70°C)   Ц: ₽ 80. Приходите ешё!
-----------
К сожалению, напиток ЭКспрессо я готовить не умею.
-----------
Продукта с таким индексом не существует.
>>>>> КОНЕЦ СМЕНЫ >>>>>>

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Кофемат (#001), расположение: Офисы на Семи Холмах, Выручка: 220
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

 */